datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BoardVisibility {
  public
  private
}

model Board {
  id            String          @id @default(cuid()) @map("id")
  title         String          @map("title")
  schemaVersion Int             @map("schema_version")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  visibility    BoardVisibility @default(public) @map("visibility")

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  nodes Node[]
  edges Edge[]

  @@index([userId])
  @@index([visibility])
  @@index([createdAt])
  @@map("boards")
}

model Node {
  id      String @id @default(cuid()) @map("id")
  boardId String @map("board_id")
  type    String @map("type")
  x       Int    @map("x")
  y       Int    @map("y")
  w       Int?   @map("w")
  h       Int?   @map("h")

  // content fields expected by server.mjs
  title    String? @map("title")
  text     String? @map("text")
  html     String? @map("html")
  descHtml String? @map("desc_html")
  linkUrl  String? @map("link_url")
  imageUrl String? @map("image_url")

  board Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tags  NodeTag[]

  @@index([boardId])
  @@index([boardId, type])
  @@map("nodes")
}

model Edge {
  id       String  @id @default(cuid()) @map("id")
  boardId  String  @map("board_id")
  sourceId String  @map("source_id")
  targetId String  @map("target_id")
  label    String? @map("label")
  dashed   Boolean @default(false) @map("dashed")
  color    String? @map("color")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId])
  @@index([boardId, sourceId])
  @@index([boardId, targetId])
  @@map("edges")
}

model Tag {
  id    String    @id @default(cuid()) @map("id")
  name  String    @unique @map("name")
  nodes NodeTag[]

  @@map("tags")
}

model NodeTag {
  nodeId String @map("node_id")
  tagId  String @map("tag_id")

  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([nodeId, tagId])
  @@index([nodeId])
  @@index([tagId])
  @@map("node_tags")
}

model User {
  id              String    @id @default(cuid()) @map("id")
  email           String    @unique @map("email")
  emailVerifiedAt DateTime? @map("email_verified_at")
  passwordHash    String    @map("password_hash")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  sessions            Session[]
  verificationTokens  VerificationToken[]  @relation("UserToVerificationTokens")
  passwordResetTokens PasswordResetToken[] @relation("UserToPasswordResetTokens")
  Board               Board[]

  @@index([createdAt])
  @@index([emailVerifiedAt])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @map("token")
  ipHash    String?  @map("ip_hash")
  userAgent String?  @map("user_agent")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model VerificationToken {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  user      User     @relation(name: "UserToVerificationTokens", fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @map("token")
  purpose   String   @map("purpose") // 'email-verify'
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid()) @map("id")
  userId    String   @map("user_id")
  user      User     @relation(name: "UserToPasswordResetTokens", fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique @map("token")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}
